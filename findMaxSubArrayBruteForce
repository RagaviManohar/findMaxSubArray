

/* Solution with time complexity of O(n^2). Quadratic Algorithm.
Idea: The sum of A[i..j] can be efficiently calculated as (sum of A[i..j-1]) + A[j].*/

function findMaxSubArrayBruteForceNew(arr) {
    var max_so_far = Number.NEGATIVE_INFINITY;
    var leftIndex = 0,
        rightIndex = arr.length - 1,
        len = arr.length;

    for (var i = 0; i < len; i++) {
        maxSum = 0;

        for (var j = i; j < len; j++) {
            maxSum += arr[j];

            if (max_so_far < maxSum) {
                leftIndex = i;
                max_so_far = maxSum;
                rightIndex = j;
            }
        }
    }
    return {
        left: leftIndex,
        right: rightIndex,
        final_max_sum_subArray: max_so_far,
    };
}

console.log(findMaxSubArrayBruteForceNew(array));
